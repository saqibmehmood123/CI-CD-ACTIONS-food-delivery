server.port=8081
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop

# Enable actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always

# Health check configuration
management.health.diskspace.enabled=true

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration
#spring.kafka.bootstrap-servers=b-2.fooddeliverymsk.pu715a.c4.kafka.eu-west-3.amazonaws.com:9092,b-3.fooddeliverymsk.pu715a.c4.kafka.eu-west-3.amazonaws.com:9092,b-1.fooddeliverymsk.pu715a.c4.kafka.eu-west-3.amazonaws.com:9092


#spring.kafka.bootstrap-servers=b-1.fooddeliverykafka.n1j38i.c4.kafka.eu-west-3.amazonaws.com:9098,b-2.fooddeliverykafka.n1j38i.c4.kafka.eu-west-3.amazonaws.com:9098,b-3.fooddeliverykafka.n1j38i.c4.kafka.eu-west-3.amazonaws.com:9098
#
#spring.kafka.properties.security.protocol=SASL_SSL
#spring.kafka.properties.sasl.mechanism=AWS_MSK_IAM
#spring.kafka.properties.sasl.jaas.config=software.amazon.msk.auth.iam.IAMLoginModule required;








## ===== PRODUCER CONFIGURATION (Sending OrderCreatedEvent) =====
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#
## ===== CONSUMER CONFIGURATION (Listening for DeliveryCompletedEvent) =====
## This is for the listener that receives delivery updates
#spring.kafka.consumer.group-id=order-service-delivery-group
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#
## Trust the package where DeliveryCompletedEvent exists IN THIS SERVICE
## Tell the consumer to deserialize messages to the DeliveryCompletedEvent class
#spring.kafka.consumer.properties.spring.json.value.default.type=com.fooddelievery.event.OrderCreatedEvent
# In application-dev.properties, add:
#spring.kafka.properties.socket.connection.setup.timeout.ms=70000
#spring.kafka.properties.request.timeout.ms=70000
#server.port=8081




# ===== KAFKA BROKER CONNECTION =====





# ===== DATABASE CONFIG =====
#spring.datasource.url=jdbc:h2:mem:orderdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.h2.console.enabled=true
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=create-drop



# Enable health endpoint
#management.endpoints.web.exposure.include=health,info
#management.endpoint.health.show-details=always
#
## Add service-specific info (optional)
#info.service.name=Order Service
#info.service.description=Handles order creation and status







## ===== PRODUCER CONFIGURATION (Sending OrderCreatedEvent) =====
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#
## ===== CONSUMER CONFIGURATION (Listening for DeliveryCompletedEvent) =====
## This is for the listener that receives delivery updates
#spring.kafka.consumer.group-id=order-service-delivery-group
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#
## Trust the package where DeliveryCompletedEvent exists IN THIS SERVICE
#spring.kafka.consumer.properties.spring.json.trusted.packages=*
## Tell the consumer to deserialize messages to the DeliveryCompletedEvent class
#spring.kafka.consumer.properties.spring.json.value.default.type=com.fooddelievery.event.OrderCreatedEvent

# 4. Check Docker build process
#cat Dockerfile



